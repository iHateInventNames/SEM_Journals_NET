//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace SEM.DesktopClient.ServiceJournalAccessReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Subscription", Namespace="http://schemas.datacontract.org/2004/07/SEM.WcfServiceApplication")]
    public partial class Subscription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int JournalIdField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int JournalId {
            get {
                return this.JournalIdField;
            }
            set {
                if ((this.JournalIdField.Equals(value) != true)) {
                    this.JournalIdField = value;
                    this.RaisePropertyChanged("JournalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceJournalAccessReference.IServiceJournalsAccess")]
    public interface IServiceJournalsAccess {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceJournalsAccess/GetJournal", ReplyAction="http://tempuri.org/IServiceJournalsAccess/GetJournalResponse")]
        System.Threading.Tasks.Task<SEM.DesktopClient.ServiceJournalAccessReference.GetJournalResponse> GetJournalAsync(SEM.DesktopClient.ServiceJournalAccessReference.GetJournalRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceJournalsAccess/GetMySubscriptions", ReplyAction="http://tempuri.org/IServiceJournalsAccess/GetMySubscriptionsResponse")]
        System.Threading.Tasks.Task<SEM.DesktopClient.ServiceJournalAccessReference.GetMySubscriptionsResponse> GetMySubscriptionsAsync(SEM.DesktopClient.ServiceJournalAccessReference.GetMySubscriptionsRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetJournal", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetJournalRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int value;
        
        public GetJournalRequest() {
        }
        
        public GetJournalRequest(string login, string password, int value) {
            this.login = login;
            this.password = password;
            this.value = value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetJournalResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetJournalResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public byte[] GetJournalResult;
        
        public GetJournalResponse() {
        }
        
        public GetJournalResponse(byte[] GetJournalResult) {
            this.GetJournalResult = GetJournalResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMySubscriptions", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetMySubscriptionsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string password;
        
        public GetMySubscriptionsRequest() {
        }
        
        public GetMySubscriptionsRequest(string login, string password) {
            this.login = login;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMySubscriptionsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetMySubscriptionsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<SEM.DesktopClient.ServiceJournalAccessReference.Subscription> GetMySubscriptionsResult;
        
        public GetMySubscriptionsResponse() {
        }
        
        public GetMySubscriptionsResponse(System.Collections.ObjectModel.ObservableCollection<SEM.DesktopClient.ServiceJournalAccessReference.Subscription> GetMySubscriptionsResult) {
            this.GetMySubscriptionsResult = GetMySubscriptionsResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceJournalsAccessChannel : SEM.DesktopClient.ServiceJournalAccessReference.IServiceJournalsAccess, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceJournalsAccessClient : System.ServiceModel.ClientBase<SEM.DesktopClient.ServiceJournalAccessReference.IServiceJournalsAccess>, SEM.DesktopClient.ServiceJournalAccessReference.IServiceJournalsAccess {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceJournalsAccessClient() : 
                base(ServiceJournalsAccessClient.GetDefaultBinding(), ServiceJournalsAccessClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IServiceJournalsAccess.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceJournalsAccessClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceJournalsAccessClient.GetBindingForEndpoint(endpointConfiguration), ServiceJournalsAccessClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceJournalsAccessClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceJournalsAccessClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceJournalsAccessClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceJournalsAccessClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceJournalsAccessClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<SEM.DesktopClient.ServiceJournalAccessReference.GetJournalResponse> GetJournalAsync(SEM.DesktopClient.ServiceJournalAccessReference.GetJournalRequest request) {
            return base.Channel.GetJournalAsync(request);
        }
        
        public System.Threading.Tasks.Task<SEM.DesktopClient.ServiceJournalAccessReference.GetMySubscriptionsResponse> GetMySubscriptionsAsync(SEM.DesktopClient.ServiceJournalAccessReference.GetMySubscriptionsRequest request) {
            return base.Channel.GetMySubscriptionsAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IServiceJournalsAccess)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IServiceJournalsAccess)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:52404/ServiceJournalsAccess.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ServiceJournalsAccessClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IServiceJournalsAccess);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ServiceJournalsAccessClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IServiceJournalsAccess);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IServiceJournalsAccess,
        }
    }
}
